Histflow::Histflow(std::string new_name)
: Cutflow(new_name)
{
    /* Do nothing */
}

Histflow::Histflow(std::string new_name, Cut* new_root)
: Cutflow(new_name, new_root)
{
    /* Do nothing */
}

Histflow::~Histflow() {};

template<typename THist>
THist* Histflow::bookHist(std::string target_cut_name, THist* hist)
{
    // Prepend cut name to hist name
    TString new_hist_name = TString(target_cut_name)+"__"+hist->GetName();
    // Make new dynamic hist object
    THist* new_hist = (THist*)hist->Clone(new_hist_name);
    // Track new hist
    hist_writers[new_hist_name] = [new_hist] { return new_hist->Write(); };
    if (fill_schedule.count(target_cut_name) == 0) 
    {
        fill_schedule[target_cut_name] = {};
    }
    return new_hist;
}

template<typename THist1D>
void Histflow::bookHist1D(std::string target_cut_name, THist1D* hist, 
                          std::function<bool()> eval_lambda, 
                          std::function<double()> fill_lambda)
{
    THist1D* new_hist = bookHist<THist1D>(target_cut_name, hist);
    fill_schedule[target_cut_name].push_back(
        [new_hist, fill_lambda, eval_lambda](double weight) 
        { 
            if (eval_lambda())
            {
                new_hist->Fill(fill_lambda(), weight); 
            }
            return;
        }
    );
}

template<typename THist1D>
void Histflow::bookHist1D(Cut* target_cut, THist1D* hist, std::function<bool()> eval_lambda, 
                          std::function<double()> fill_lambda)
{
    return bookHist1D(target_cut->name, hist, eval_lambda, fill_lambda);
}

template<typename THist1D>
void Histflow::bookHist1D(std::string target_cut_name, THist1D* hist, 
                          std::function<double()> fill_lambda)
{
    return bookHist1D(target_cut_name, hist, []() { return true; }, fill_lambda);
}

template<typename THist1D>
void Histflow::bookHist1D(Cut* target_cut, THist1D* hist, std::function<double()> fill_lambda)
{
    return bookHist1D(target_cut->name, hist, fill_lambda);
}


template<typename THist2D>
void Histflow::bookHist2D(std::string target_cut_name, THist2D* hist, 
                          std::function<bool()> eval_lambda, 
                          std::function<std::pair<double, double>()> fill_lambda)
{
    THist2D* new_hist = bookHist<THist2D>(target_cut_name, hist);
    fill_schedule[target_cut_name].push_back(
        [new_hist, fill_lambda, eval_lambda](double weight) 
        { 
            if (eval_lambda())
            {
                std::pair<double, double> result = fill_lambda();
                new_hist->Fill(result.first, result.second, weight); 
            }
            return;
        }
    );
}

template<typename THist2D>
void Histflow::bookHist2D(Cut* target_cut, THist2D* hist, 
                          std::function<bool()> eval_lambda,
                          std::function<std::pair<double, double>()> fill_lambda)
{
    return bookHist2D(target_cut->name, hist, eval_lambda, fill_lambda);
}

template<typename THist2D>
void Histflow::bookHist2D(std::string target_cut_name, THist2D* hist, 
                          std::function<std::pair<double, double>()> fill_lambda)
{
    return bookHist2D(target_cut_name, hist, []() { return true; }, fill_lambda);
}

template<typename THist2D>
void Histflow::bookHist2D(Cut* target_cut, THist2D* hist, 
                          std::function<std::pair<double, double>()> fill_lambda)
{
    return bookHist2D(target_cut->name, hist, fill_lambda);
}


template<typename THist3D>
void Histflow::bookHist3D(std::string target_cut_name, THist3D* hist, 
                          std::function<bool()> eval_lambda, 
                          std::function<std::tuple<double, double, double>()> fill_lambda)
{
    THist3D* new_hist = bookHist<THist3D>(target_cut_name, hist);
    fill_schedule[target_cut_name].push_back(
        [new_hist, fill_lambda, eval_lambda](double weight) 
        { 
            if (eval_lambda())
            {
                std::tuple<double, double, double> result = fill_lambda();
                new_hist->Fill(std::get<0>(result), std::get<1>(result), std::get<2>(result), weight); 
            }
            return;
        }
    );
}

template<typename THist3D>
void Histflow::bookHist3D(Cut* target_cut, THist3D* hist, 
                          std::function<bool()> eval_lambda,
                          std::function<std::tuple<double, double, double>()> fill_lambda)
{
    return bookHist3D(target_cut->name, hist, eval_lambda, fill_lambda);
}

template<typename THist3D>
void Histflow::bookHist3D(std::string target_cut_name, THist3D* hist, 
                          std::function<std::tuple<double, double, double>()> fill_lambda)
{
    return bookHist3D(target_cut_name, hist, []() { return true; }, fill_lambda);
}

template<typename THist3D>
void Histflow::bookHist3D(Cut* target_cut, THist3D* hist, 
                          std::function<std::tuple<double, double, double>()> fill_lambda)
{
    return bookHist3D(target_cut->name, hist, fill_lambda);
}


void Histflow::writeHists(TFile* tfile)
{
    tfile->cd();
    std::map<TString, std::function<void()>>::iterator iter;
    for(iter = hist_writers.begin(); iter != hist_writers.end(); ++iter)
    {
        (*iter).second();
    }
}

bool Histflow::recursiveEvaluate(Cut* cut)
{
    if (debugger_is_set) { debugger(cut); }
    // Start timer
    std::chrono::high_resolution_clock::time_point t1 = std::chrono::high_resolution_clock::now();
    // Run cut logic and compute weight
    bool passed = cut->getResult();
    double weight = cut->getWeight();
    // Stop timer and calculate runtime
    std::chrono::high_resolution_clock::time_point t2 = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> runtime = t2 - t1;
    cut->runtimes.push(runtime.count());
    // Continue down the tree
    if (passed)
    {
        cut->n_pass++;
        cut->n_pass_weighted += weight;
        if (fill_schedule.count(cut->name) == 1)
        {
            // Fill histograms
            std::vector<std::function<void(double)>> fill_lambdas = fill_schedule[cut->name];
            for (auto& fill : fill_lambdas) { fill(weight); }
        }
        if (cut->right == nullptr) { return true; }
        else { return recursiveEvaluate(cut->right); }
    }
    else
    {
        cut->n_fail++;
        cut->n_fail_weighted += weight;
        if (cut->left == nullptr) { return false; }
        else { return recursiveEvaluate(cut->left); }
    }
}
