#ifndef LOOPER_H
#define LOOPER_H

#include <functional>

#include "TString.h"
#include "TChain.h"
#include "TFile.h"
#include "TTree.h"
#include "TTreeCache.h"
#include "TTreeCacheUnzip.h"

/**
 * Object to handle looping over ROOT files
 */
class Looper
{
protected:
    /** Flag for continuing event loop */
    bool keep_alive;
public:
    /** ROOT TChain of files to loop over */
    TChain* tchain;
    /** ROOT TTree name */
    TString ttree_name;
    /** Current entry in TTree (i.e. current index of event loop) */
    unsigned int current_entry;
    /** Number of events that have been processed */
    unsigned int n_events_processed;
    /** Number of events in the TChain */
    unsigned int n_events_total;
    
    /**
     * Looper object constructor
     * @param new_tchain pointer to ROOT TChain of files to loop over
     * @return none
     */
    Looper(TChain* new_tchain);
    /**
     * Looper object constructor
     * @param cli HEPCLI object
     * @return none
     */
    Looper(HEPCLI& cli);
    /**
     * Looper object destructor
     * @return none
     */
    virtual ~Looper();
    /**
     * Run looper with file- and event-processing logic captured in void lambda functions.
     *
     * The following example uses a class named "Selector" generated by ROOT::MakeSelector;
     * this class requires certain file- and event-processing initialization steps:
     * @code{.cpp}
     * int main()
     * {
     *     TChain* tchain = new TChain("Events");
     *     tchain->Add("/path/to/file.root");
     *     selector = Selector(); // generated by ROOT::MakeSelector
     *     looper = Looper(tchain, "Events");
     *     looper.run(
     *         [&](TTree* ttree) { selector.Init(ttree); },
     *         [&](int entry) 
     *         {
     *             selector.GetEntry(entry);
     *             selector.Process(entry);
     *             // -> insert your favorite cutflow here <--
     *         }
     *     );
     * }
     * @endcode
     * @param init file-level initialization steps captured in a void lambda function
     * @param eval event-level logic captured in a void lambda function
     * @return none
     */
    void run(std::function<void(TTree* ttree)> init, std::function<void(int entry)> eval);

    /**
     * Stop event loop
     * @return none
     */
    void stop();
};

#include "looper.icc"

#endif
