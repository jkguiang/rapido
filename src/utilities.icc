Utilities::CSVFile::CSVFile(std::ofstream& new_ofstream, std::string new_name, 
                            std::vector<std::string> new_headers) 
: ofstream(new_ofstream)
{
    name = new_name;
    headers = new_headers;
    // Write headers to new CSV file
    buffer = new_headers;
    writeRow(false); // clears buffer
}

Utilities::CSVFile::~CSVFile() {}

Utilities::CSVFile Utilities::CSVFile::clone(std::string new_name)
{
    Utilities::CSVFile new_csv = Utilities::CSVFile(ofstream, new_name, headers);
    // Copy original CSV contents to new CSV
    std::ifstream ifstream(name);
    ofstream.open(new_name);
    ofstream << ifstream.rdbuf();
    ofstream.close();
    return new_csv;
}

template<typename Type>
void Utilities::CSVFile::pushCol(Type value)
{
    buffer.push_back(std::to_string(value));
    return;
}

template<>
void Utilities::CSVFile::pushCol<std::string>(std::string value)
{
    buffer.push_back(value);
    return;
}

void Utilities::CSVFile::writeRow(bool append)
{
    if (buffer.size() == headers.size())
    {
        if (append) { ofstream.open(name, std::ios::app); }
        else { ofstream.open(name); }
        for (unsigned int i = 0; i < buffer.size(); i++)
        {
            ofstream << buffer.at(i); // DEBUG
            if (i < buffer.size() - 1) { ofstream << ","; }
        }
        ofstream << std::endl;
        ofstream.close();
        buffer.clear();
    }
    else
    {
        throw std::runtime_error("CSVFile::writeRow: no buffered columns to write");
    }
    return;
}

Utilities::Dynamic::~Dynamic() {}

template<typename Type>
Utilities::Variable<Type>::Variable() {}

template<typename Type>
Utilities::Variable<Type>::Variable(Type new_reset_value)
{ 
    value = new_reset_value;
    reset_value = new_reset_value;
}

template<typename Type>
Utilities::Variable<Type>::~Variable() {}

template<typename Type>
Type Utilities::Variable<Type>::getValue() { return value; }

template<typename Type>
void Utilities::Variable<Type>::setValue(Type new_value) 
{ 
    value = new_value; 
}

template<typename Type>
void Utilities::Variable<Type>::setResetValue(Type new_reset_value) 
{ 
    reset_value = new_reset_value; 
}

template<typename Type>
void Utilities::Variable<Type>::resetValue() { value = reset_value; }

Utilities::Variables::Variables() {}

Utilities::Variables::~Variables() 
{
    std::map<std::string, Utilities::Dynamic*>::iterator iter;
    for (iter = variables.begin(); iter != variables.end(); ++iter)
    {
        delete (*iter).second;
    }

    variables.clear();
}

template<typename Type>
Utilities::Variable<Type>* Utilities::Variables::getVar(std::string name)
{
    if (variables.count(name) == 1)
    {
        return (Variable<Type>*)variables[name];
    }
    else
    {
        std::string msg = "Error - "+name+" does not exist.";
        throw std::runtime_error("Utilities::Variables::getVar: "+msg);
        return nullptr;
    }
}

template<typename Type>
void Utilities::Variables::newVar(std::string new_name) 
{
    Variable<Type>* var = new Variable<Type>();
    variables[new_name] = var;
    resetters[new_name] = [var] { return var->resetValue(); };
    return;
}

template<typename Type>
void Utilities::Variables::newVar(std::string new_name, Type new_reset_value) 
{
    Variable<Type>* var = new Variable<Type>(new_reset_value);
    variables[new_name] = var;
    resetters[new_name] = [var] { return var->resetValue(); };
    return;
}

template<typename Type>
Type Utilities::Variables::getVal(std::string name)
{
    Variable<Type>* var = getVar<Type>(name);
    return var->getValue();
}

template<typename Type>
void Utilities::Variables::setVal(std::string name, Type new_value)
{
    Variable<Type>* var = getVar<Type>(name);
    return var->setValue(new_value);
}

template<typename Type>
void Utilities::Variables::resetVal(std::string name)
{
    Variable<Type>* var = getVar<Type>(name);
    return var->resetValue();
}

void Utilities::Variables::resetVars()
{
    std::map<std::string, std::function<void()>>::iterator iter;
    for (iter = resetters.begin(); iter != resetters.end(); ++iter)
    {
        (*iter).second();
    }
    return;
}
