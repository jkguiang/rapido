/**
 * Dynamic object destructor
 * @params: none
 * @return: none
 */
Utilities::Dynamic::~Dynamic() {}


/**
 * Variable object constructor
 * @template: type of variable
 * @params: pointer to TTree, branch name
 * @return: none
 */
template<typename Type>
Utilities::Variable<Type>::Variable(Type new_value)
{ 
    value = new_value;
}

/**
 * Variable object destructor
 * @template: type of variable
 * @params: none
 * @return: none
 */
template<typename Type>
Utilities::Variable<Type>::~Variable() {}

/**
 * Get current value
 * @template: type of variable
 * @params: none
 * @return: value of current leaf
 */
template<typename Type>
Type Utilities::Variable<Type>::getValue() { return value; }

/**
 * Set value of variable
 * @template: type of variable
 * @params: new value
 * @return: none
 */
template<typename Type>
void Utilities::Variable<Type>::setValue(Type new_value) 
{ 
    value = new_value; 
}

/**
 * Variables object constructor
 * @params: none
 * @return: none
 */
Utilities::Variables::Variables() {}

/**
 * Variables object destructor
 * @params: none
 * @return: none
 */
Utilities::Variables::~Variables() 
{
    std::map<std::string, Utilities::Dynamic*>::iterator iter;
    for(iter = variables.begin(); iter != variables.end(); ++iter)
    {
        delete (*iter).second;
    }

    variables.clear();
}

/** PRIVATE
 * Retrieve variable object from map if it exists
 * @template: type of variable
 * @params: name of variable
 * @return: none
 */
template<typename Type>
Utilities::Variable<Type>* Utilities::Variables::getVariable(std::string name)
{
    if (variables.count(name) == 1)
    {
        return (Variable<Type>*)variables[name];
    }
    else
    {
        std::string msg = "Error - "+name+" does not exist.";
        throw std::runtime_error("Utilities::Variables::new: "+msg);
        return NULL;
    }
}

/**
 * Add blank variable to map
 * @template: type of new variable
 * @params: name of new variable
 * @return: none
 */
template<typename Type>
void Utilities::Variables::add(std::string new_name) 
{
    variables[new_name] = new Variable<Type>(NULL);
    return;
}

/**
 * Add new variable to map
 * @template: type of new variable
 * @params: name of new variable, value of new variable
 * @return: none
 */
template<typename Type>
void Utilities::Variables::add(std::string new_name, Type new_value) 
{
    variables[new_name] = new Variable<Type>(new_value);
    return;
}

/**
 * Get value of a variable in map if it exists
 * @template: type of variable
 * @params: name of variable
 * @return: none
 */
template<typename Type>
Type Utilities::Variables::get(std::string name)
{
    Variable<Type>* var = getVariable<Type>(name);
    return var->getValue();
}

/**
 * Set value of a variable in map if it exists
 * @template: type of variable
 * @params: name of variable, new value for variable
 * @return: none
 */
template<typename Type>
Type Utilities::Variables::set(std::string name, Type new_value)
{
    Variable<Type>* var = getVariable<Type>(name);
    return var->setValue(new_value);
}
